import java.util.HashSet;
import java.util.Random;
import java.util.TreeSet;

//Each data set is generated by running the 4 methods on 6 input seed sizes and testing each size 20 times and taking the average time in nanoseconds.

public class Main {
    public static void main(String[] args) {
        TimeAnalysis timeAnalysis = new TimeAnalysis();
        long time = 0;

        System.out.println("HashSet insert");
        for (int i = 0; i < 20; i++){
            time = timeAnalysis.insertHash(100);
        }
        time = time/20;
        System.out.println("Elapsed Average Time: "+ time);
        time = 0;

        for (int i = 0; i < 20; i++){
            time = timeAnalysis.insertHash(500);
        }
        time = time/20;
        System.out.println("Elapsed Average Time: "+ time);
        time = 0;

        for (int i = 0; i < 20; i++){
            time = timeAnalysis.insertHash(1000);
        }
        time = time/20;
        System.out.println("Elapsed Average Time: "+ time);
        time = 0;
        for (int i = 0; i < 20; i++){
            time = timeAnalysis.insertHash(5000);
        }
        time = time/20;
        System.out.println("Elapsed Average Time: "+ time);
        time = 0;
        for (int i = 0; i < 20; i++){
            time = timeAnalysis.insertHash(10000);
        }
        time = time/20;
        System.out.println("Elapsed Average Time: "+ time);
        time = 0;

        for (int i = 0; i < 20; i++){
            time = timeAnalysis.insertHash(50000);
        }
        time = time/20;
        System.out.println("Elapsed Average Time: "+ time);
        time = 0;



        System.out.println("\nTreeSet insert");
        for (int i = 0; i < 10; i++){
            time = timeAnalysis.insetTree(100);
        }
        time = time/20;
        System.out.println("Elapsed Average Time: "+ time);
        time = 0;

        for (int i = 0; i < 20; i++){
            time = timeAnalysis.insetTree(500);
        }
        time = time/20;
        System.out.println("Elapsed Average Time: "+ time);
        time = 0;

        for (int i = 0; i < 20; i++){
            time = timeAnalysis.insetTree(1000);
        }
        time = time/20;
        System.out.println("Elapsed Average Time: "+ time);
        time = 0;
        for (int i = 0; i < 20; i++){
            time = timeAnalysis.insetTree(5000);
        }
        time = time/20;
        System.out.println("Elapsed Average Time: "+ time);
        time = 0;
        for (int i = 0; i < 20; i++){
            time = timeAnalysis.insetTree(10000);
        }
        time = time/20;
        System.out.println("Elapsed Average Time: "+ time);
        time = 0;

        for (int i = 0; i < 20; i++){
            time = timeAnalysis.insetTree(50000);
        }
        time = time/20;
        System.out.println("Elapsed Average Time: "+ time);
        time = 0;


        @SuppressWarnings("MismatchedQueryAndUpdateOfCollection") HashSet<Integer> hashSet = new HashSet<Integer>();
        long seed = 500;
        Random random = new Random(seed);
        for (int i = 0; i < seed; i++){
            hashSet.add(random.nextInt());
        }

        System.out.println("\nHashSet Search");
        for (int i = 0; i < 20; i++){
            time = timeAnalysis.searchHash(100, hashSet);
        }
        time = time/20;
        System.out.println("Elapsed Average Time: "+ time);
        time = 0;

        for (int i = 0; i < 20; i++){
            time = timeAnalysis.searchHash(500, hashSet);
        }
        time = time/20;
        System.out.println("Elapsed Average Time: "+ time);
        time = 0;

        for (int i = 0; i < 20; i++){
            time = timeAnalysis.searchHash(1000, hashSet);
        }
        time = time/20;
        System.out.println("Elapsed Average Time: "+ time);
        time = 0;
        for (int i = 0; i < 20; i++){
            time = timeAnalysis.searchHash(5000, hashSet);
        }
        time = time/20;
        System.out.println("Elapsed Average Time: "+ time);
        time = 0;
        for (int i = 0; i < 20; i++){
            time = timeAnalysis.searchHash(10000, hashSet);
        }
        time = time/20;
        System.out.println("Elapsed Average Time: "+ time);
        time = 0;

        for (int i = 0; i < 20; i++){
            time = timeAnalysis.searchHash(50000, hashSet);
        }
        time = time/20;
        System.out.println("Elapsed Average Time: "+ time);
        time = 0;


        TreeSet<Integer> treeSet = new TreeSet<>();
        Random ran = new Random(seed);
        for (int j = 0; j < seed; j++){
            treeSet.add(ran.nextInt());
        }
        System.out.println("\nTreeSet Search");
        for (int i = 0; i < 20; i++){
            time = timeAnalysis.searchTree(100, treeSet);
        }
        time = time/20;
        System.out.println("Elapsed Average Time: "+ time);
        time = 0;

        for (int i = 0; i < 20; i++){
            time = timeAnalysis.searchTree(500, treeSet);
        }
        time = time/20;
        System.out.println("Elapsed Average Time: "+ time);
        time = 0;

        for (int i = 0; i < 20; i++){
            time = timeAnalysis.searchTree(1000, treeSet);
        }
        time = time/20;
        System.out.println("Elapsed Average Time: "+ time);
        time = 0;
        for (int i = 0; i < 20; i++){
            time = timeAnalysis.searchTree(5000, treeSet);
        }
        time = time/20;
        System.out.println("Elapsed Average Time: "+ time);
        time = 0;
        for (int i = 0; i < 20; i++){
            time = timeAnalysis.searchTree(10000, treeSet);
        }
        time = time/20;
        System.out.println("Elapsed Average Time: "+ time);
        time = 0;

        for (int i = 0; i < 20; i++){
            time = timeAnalysis.searchTree(50000, treeSet);
        }
        time = time/20;
        System.out.println("Elapsed Average Time: "+ time);
    }
}
